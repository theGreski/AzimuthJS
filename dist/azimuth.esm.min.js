let R=6371009;function deg2rad(e){if("number"!=typeof e||isNaN(e))throw new Error("Input to deg2rad must be a valid number.");return e*(Math.PI/180)}function rad2deg(e){if("number"!=typeof e||isNaN(e))throw new Error("Input to rad2deg must be a valid number.");return e*(180/Math.PI)}function round(e,r=0){return Number(Math.round(Number(e)+"e+"+r)+"e-"+r)}function getBearingRhumbLine(e,r,t,a){if(e===t&&r===a)return 0;e=deg2rad(e),t=deg2rad(t);let n=deg2rad(a-r);a=Math.log(Math.tan(Math.PI/4+t/2)/Math.tan(Math.PI/4+e/2)),Math.abs(n)>Math.PI&&(n=0<n?-(2*Math.PI-n):2*Math.PI+n),r=Math.atan2(n,a);return(rad2deg(r)+360)%360}function getBearingGreatCircle(e,r,t,a){e=deg2rad(e),t=deg2rad(t),a=deg2rad(a-r),r=Math.sin(a)*Math.cos(t),e=Math.cos(e)*Math.sin(t)-Math.sin(e)*Math.cos(t)*Math.cos(a);return(rad2deg(Math.atan2(r,e))+360)%360}function getCompassDirection(e,r){if("number"!=typeof e||isNaN(e))throw new Error("Degrees parameter is not a valid number!");if("number"!=typeof r||isNaN(r))throw new Error("Precision parameter is not a valid number!");if(e<0||360<e)throw new Error("Degrees parameter outside of range (0-360)!");if(r<1||3<r)throw new Error("Precision parameter outside of range (1-3)!");360===e&&(e=0);var t=["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"];let a=3===r?16:2===r?8:4;var r=360/a,n=t.length/a;let i=Math.round(e/r)*n;return t[i=i>=t.length?0:i]}function getDistanceGreatCircle(e,r,t,a){var n,i;return e===t&&r===a?0:(n=deg2rad(e),i=deg2rad(t),t=deg2rad(t-e),e=deg2rad(a-r),a=Math.sin(t/2)*Math.sin(t/2)+Math.cos(n)*Math.cos(i)*Math.sin(e/2)*Math.sin(e/2),r=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),R*r)}function getDistanceRhumbLine(e,r,t,a){if(e===t&&r===a)return 0;var n=deg2rad(e),i=deg2rad(t),t=deg2rad(t-e);const o=deg2rad(a-r);e=Math.log(Math.tan(Math.PI/4+i/2)/Math.tan(Math.PI/4+n/2)),a=1e-11<Math.abs(e)?t/e:Math.cos(n),Math.abs(o)>Math.PI&&(o=0<o?-(2*Math.PI-o):2*Math.PI+o),r=Math.sqrt(t*t+a*a*o*o)*R;return r}function metersConverter(e,r="m"){if("m"===r)return e;switch(r){case"km":return.001*e;case"ft":return 3.28084*e;case"yd":return 1.0936*e;case"mi":return 621371e-9*e;case"nm":return 539957e-9*e;default:return e}}let azimuth=function(e,r,{units:t="m",distancePrecision:a=0,formula:n="great-circle",bearingPrecision:i=0,directionPrecision:o=2}={}){if("object"!=typeof e||null===e||"number"!=typeof e.lat||"number"!=typeof e.lng)throw new Error("First parameter must be an object with numeric 'lat' and 'lng' properties.");if("object"!=typeof r||null===r||"number"!=typeof r.lat||"number"!=typeof r.lng)throw new Error("Second parameter must be an object with numeric 'lat' and 'lng' properties.");if(90<Math.abs(e.lat)||90<Math.abs(r.lat))throw new Error("Latitude must be between -90 and 90 degrees.");if(180<Math.abs(e.lng)||180<Math.abs(r.lng))throw new Error("Longitude must be between -180 and 180 degrees.");if([[a,"distancePrecision"],[i,"bearingPrecision"],[o,"directionPrecision"]].forEach(([e,r])=>{if("number"!=typeof e||isNaN(e))throw new Error(`Parameter '${r}' must be a valid number.`)}),![a,i].every(e=>Number.isInteger(e)&&0<=e&&e<=15))throw new Error("Precision parameters must be integers between 0 and 15.");if(!["m","km","ft","yd","mi","nm"].includes(t))throw new Error("Units parameter type not supported!");if(!["great-circle","rhumb-line"].includes(n))throw new Error("Calculation formula type parameter not supported!");if(!Number.isInteger(o)||o<0||3<o)throw new Error("Direction precision must be an integer between 0 and 3.");var u={},a=round(metersConverter(("rhumb-line"===n?getDistanceRhumbLine:getDistanceGreatCircle)(e.lat,e.lng,r.lat,r.lng),t),a),t=(u.distance=a,u.units=t,0===a?"":round(("rhumb-line"===n?getBearingRhumbLine:getBearingGreatCircle)(e.lat,e.lng,r.lat,r.lng),i));return u.bearing=t,u.formula=n,0!==o&&(u.direction=0===a?"":getCompassDirection(t,o)),u};export default azimuth;