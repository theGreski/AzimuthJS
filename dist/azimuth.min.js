(function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a=a||self,a.azimuth=b())})(this,function(){var b=Math.sqrt,d=Math.cos,e=Math.sin,f=Math.atan2,g=Math.abs,h=Math.log,i=Math.tan,j=Math.round,k=Math.PI;function l(a){if("number"!=typeof a||isNaN(a))throw new Error("Input to deg2rad must be a valid number.");return a*(k/180)}function m(a){if("number"!=typeof a||isNaN(a))throw new Error("Input to rad2deg must be a valid number.");return a*(180/k)}function n(a,b=0){return+(j(+a+"e+"+b)+"e-"+b)}function o(a,b,c,d){if(a===c&&b===d)return 0;const e=l(a),j=l(c);let n=l(d-b);const o=h(i(k/4+j/2)/i(k/4+e/2));g(n)>k&&(n=0<n?-(2*k-n):2*k+n);const p=f(n,o),q=(m(p)+360)%360;return q}function p(a,b,c,g){const h=l(a),i=l(c),j=l(g-b),k=e(j)*d(i),n=d(h)*e(i)-e(h)*d(i)*d(j),o=f(k,n),p=(m(o)+360)%360;return p}function q(a,b){if("number"!=typeof a||isNaN(a))throw new Error("Degrees parameter is not a valid number!");if("number"!=typeof b||isNaN(b))throw new Error("Precision parameter is not a valid number!");if(0>a||360<a)throw new Error("Degrees parameter outside of range (0-360)!");if(1>b||3<b)throw new Error("Precision parameter outside of range (1-3)!");360===a&&(a=0);const c=["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"];let d=4;2===b&&(d=8),3===b&&(d=16);const e=360/d,f=c.length/d;let g=j(a/e)*f;return g>=c.length&&(g=0),c[g]}function r(g,h,i,j){if(g===i&&h===j)return 0;const k=l(g),m=l(i),n=l(i-g),o=l(j-h),p=e(n/2)*e(n/2)+d(k)*d(m)*e(o/2)*e(o/2),a=2*f(b(p),b(1-p));return u*a}function s(a,c,e,f){if(a===e&&c===f)return 0;const j=l(a),m=l(e),n=l(e-a),o=l(f-c),p=h(i(k/4+m/2)/i(k/4+j/2)),r=1e-11<g(p)?n/p:d(j);g(o)>k&&(o=0<o?-(2*k-o):2*k+o);const q=b(n*n+r*r*o*o)*u;return q}function t(a,b="m"){if("m"===b)return a;return"km"===b?.001*a:"ft"===b?3.28084*a:"yd"===b?1.0936*a:"mi"===b?621371e-9*a:"nm"===b?539957e-9*a:a}const u=6371009;return function(a,b,{units:c="m",distancePrecision:d=0,formula:e="great-circle",bearingPrecision:f=0,directionPrecision:h=2}={}){var i=Number.isInteger;if("object"!=typeof a||null===a||"number"!=typeof a.lat||"number"!=typeof a.lng)throw new Error("First parameter must be an object with numeric 'lat' and 'lng' properties.");if("object"!=typeof b||null===b||"number"!=typeof b.lat||"number"!=typeof b.lng)throw new Error("Second parameter must be an object with numeric 'lat' and 'lng' properties.");if(90<g(a.lat)||90<g(b.lat))throw new Error("Latitude must be between -90 and 90 degrees.");if(180<g(a.lng)||180<g(b.lng))throw new Error("Longitude must be between -180 and 180 degrees.");if([[d,"distancePrecision"],[f,"bearingPrecision"],[h,"directionPrecision"]].forEach(([a,b])=>{if("number"!=typeof a||isNaN(a))throw new Error(`Parameter '${b}' must be a valid number.`)}),![d,f].every(a=>i(a)&&0<=a&&15>=a))throw new Error("Precision parameters must be integers between 0 and 15.");if(!["m","km","ft","yd","mi","nm"].includes(c))throw new Error("Units parameter type not supported!");if(!["great-circle","rhumb-line"].includes(e))throw new Error("Calculation formula type parameter not supported!");if(!i(h)||0>h||3<h)throw new Error("Direction precision must be an integer between 0 and 3.");const j={},k=n(t("rhumb-line"===e?s(a.lat,a.lng,b.lat,b.lng):r(a.lat,a.lng,b.lat,b.lng),c),d);j.distance=k,j.units=c;const l=0===k?"":n("rhumb-line"===e?o(a.lat,a.lng,b.lat,b.lng):p(a.lat,a.lng,b.lat,b.lng),f);return j.bearing=l,j.formula=e,0!==h&&(j.direction=0===k?"":q(l,h)),j}});